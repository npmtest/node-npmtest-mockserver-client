{"/home/travis/build/npmtest/node-npmtest-mockserver-client/test.js":"/* istanbul instrument in package npmtest_mockserver_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mockserver-client/lib.npmtest_mockserver_client.js":"/* istanbul instrument in package npmtest_mockserver_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mockserver_client = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mockserver_client = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mockserver-client/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mockserver-client && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mockserver_client */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mockserver_client\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mockserver_client.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mockserver_client.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mockserver_client.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mockserver_client.__dirname + '/lib.npmtest_mockserver_client.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mockserver-client/node_modules/mockserver-client/index.js":"/*\n * mockserver\n * http://mock-server.com\n *\n * Copyright (c) 2014 James Bloom\n * Licensed under the Apache License, Version 2.0\n */\n\n(function () {\n    \"use strict\";\n\n    var Q = require('q');\n    var http = require('http');\n\n    function sendRequest(host, port, path, jsonBody, resolveCallback) {\n        var promise = (global.protractor ? protractor.promise : Q);\n        var deferred = promise.defer();\n\n        if (global.protractor)\n        {\n            deferred.resolve = deferred.fulfill;\n        }\n\n        var body = (typeof jsonBody === \"string\" ? jsonBody : JSON.stringify(jsonBody || \"\"));\n        var options = {\n            method: 'PUT',\n            host: host,\n            path: path,\n            port: port,\n            headers: {\n                'Content-Type': \"application/json; charset=utf-8\"\n            }\n        };\n\n        var req = http.request(options);\n\n        req.once('response', function (response) {\n            var data = '';\n\n            if (response.statusCode === 400 || response.statusCode === 404) {\n                deferred.reject(response.statusCode);\n            }\n\n            response.on('data', function (chunk) {\n                data += chunk;\n            });\n\n            response.on('end', function () {\n                if (resolveCallback) {\n                    deferred.resolve(resolveCallback(data));\n                } else {\n                    deferred.resolve({\n                        statusCode: response.statusCode,\n                        body: data\n                    });\n                }\n            });\n        });\n\n        req.once('error', function (error) {\n            deferred.reject(error);\n        });\n\n        req.write(body);\n        req.end();\n\n        return deferred.promise;\n    }\n\n    /**\n     * Start the client communicating to a MockServer at the specified host and port\n     * for example:\n     *\n     *   var client = mockServerClient(\"localhost\", 1080);\n     *\n     * @param host the host for the MockServer to communicate with\n     * @param port the port for the MockServer to communicate with\n     */\n    var mockServerClient = function (host, port) {\n\n            /**\n             * The default headers added to to the mocked response when using mockSimpleResponse(...)\n             */\n            var defaultResponseHeaders = [\n                {\"name\": \"Content-Type\", \"values\": [\"application/json; charset=utf-8\"]},\n                {\"name\": \"Cache-Control\", \"values\": [\"no-cache, no-store\"]}\n            ];\n            var createResponseMatcher = function (path) {\n                return {\n                    method: \"\",\n                    path: path,\n                    body: \"\",\n                    headers: [],\n                    cookies: [],\n                    queryStringParameters: []\n                };\n            };\n            var createExpectation = function (path, responseBody, statusCode) {\n                return {\n                    httpRequest: createResponseMatcher(path),\n                    httpResponse: {\n                        statusCode: statusCode || 200,\n                        body: JSON.stringify(responseBody),\n                        cookies: [],\n                        headers: defaultResponseHeaders,\n                        delay: {\n                            timeUnit: \"MICROSECONDS\",\n                            value: 0\n                        }\n                    },\n                    times: {\n                        remainingTimes: 1,\n                        unlimited: false\n                    }\n                };\n            };\n            /**\n             * Setup an expectation in the MockServer by specifying an expectation object\n             * for example:\n             *\n             *   mockServerClient(\"localhost\", 1080).mockAnyResponse(\n             *       {\n             *           'httpRequest': {\n             *               'path': '/somePath',\n             *               'body': {\n             *                   'type': \"STRING\",\n             *                   'value': 'someBody'\n             *               }\n             *           },\n             *           'httpResponse': {\n             *               'statusCode': 200,\n             *               'body': Base64.encode(JSON.stringify({ name: 'first_body' })),\n             *               'delay': {\n             *                   'timeUnit': 'MILLISECONDS',\n             *                   'value': 250\n             *               }\n             *           },\n             *           'times': {\n             *               'remainingTimes': 1,\n             *               'unlimited': false\n             *           }\n             *       }\n             *   );\n             *\n             * @param expectation the expectation to setup on the MockServer\n             */\n            var mockAnyResponse = function (expectation) {\n                return sendRequest(host, port, \"/expectation\", expectation);\n            };\n            /**\n             * Setup an expectation in the MockServer without having to specify the full expectation object\n             * for example:\n             *\n             *   mockServerClient(\"localhost\", 1080).mockSimpleResponse('/somePath', { name: 'value' }, 203);\n             *\n             * @param path the path to match requests against\n             * @param responseBody the response body to return if a request matches\n             * @param statusCode the response code to return if a request matches\n             */\n            var mockSimpleResponse = function (path, responseBody, statusCode) {\n                return mockAnyResponse(createExpectation(path, responseBody, statusCode));\n            };\n            /**\n             * Override the default headers that are used to specify the response headers in mockSimpleResponse(...)\n             * (note: if you use mockAnyResponse(...) the default headers are not used)\n             * for example:\n             *\n             *   mockServerClient(\"localhost\", 1080).setDefaultHeaders([\n             *       {\"name\": \"Content-Type\", \"values\": [\"application/json; charset=utf-8\"]},\n             *       {\"name\": \"Cache-Control\", \"values\": [\"no-cache, no-store\"]}\n             *   ])\n             *\n             * @param headers the path to match requests against\n             */\n            var setDefaultHeaders = function (headers) {\n                defaultResponseHeaders = headers;\n            };\n            /**\n             * Verify a request has been sent for example:\n             *\n             *   expect(client.verify({\n             *       'httpRequest': {\n             *           'method': 'POST',\n             *           'path': '/somePath'\n             *       }\n             *   })).toBeTruthy();\n             *\n             * @param request the http request that must be matched for this verification to pass\n             * @param count   the number of times this request must be matched\n             * @param exact   true if the count is matched as \"equal to\" or false if the count is matched as \"greater than or equal to\"\n             */\n            var verify = function (request, count, exact) {\n                if (count === undefined) {\n                    count = 1;\n                }\n                return sendRequest(host, port, \"/verify\", {\n                    \"httpRequest\": request,\n                    \"times\": {\n                        \"count\": count,\n                        \"exact\": exact\n                    }\n                }).then(function (result) {\n                    if (result.statusCode !== 202) {\n                        console && console.error && console.error(result.body);\n                        throw result.body;\n                    }\n                    return _this;\n                });\n            };\n            /**\n             * Verify a sequence of requests has been sent for example:\n             *\n             *   client.verifySequence(\n             *       {\n             *          'method': 'POST',\n             *          'path': '/first_request'\n             *       },\n             *       {\n             *          'method': 'POST',\n             *          'path': '/second_request'\n             *       },\n             *       {\n             *          'method': 'POST',\n             *          'path': '/third_request'\n             *       }\n             *   );\n             *\n             * @param arguments the list of http requests that must be matched for this verification to pass\n             */\n            var verifySequence = function () {\n                var requestSequence = [];\n                for (var i = 0; i < arguments.length; i++) {\n                    requestSequence.push(arguments[i]);\n                }\n                return sendRequest(host, port, \"/verifySequence\", {\n                    \"httpRequests\": requestSequence\n                }).then(function (result) {\n                    if (result.statusCode !== 202) {\n                        console && console.error && console.error(result.body);\n                        throw result.body;\n                    }\n                    return _this;\n                });\n            };\n            /**\n             * Reset MockServer by clearing all expectations\n             */\n            var reset = function () {\n                return sendRequest(host, port, \"/reset\");\n            };\n            /**\n             * Clear all expectations that match the specified path\n             *\n             * @param pathOrRequestMatcher  if a string is passed in the value will be treated as the path to\n             *                              decide which expectations to cleared, however if an object is passed\n             *                              in the value will be treated as a full request matcher object\n             */\n            var clear = function (pathOrRequestMatcher) {\n                if (typeof pathOrRequestMatcher === \"string\") {\n                    return sendRequest(host, port, \"/clear\", createResponseMatcher(pathOrRequestMatcher));\n                } else if (pathOrRequestMatcher) {\n                    return sendRequest(host, port, \"/clear\", pathOrRequestMatcher);\n                } else {\n                    return sendRequest(host, port, \"/clear\", createResponseMatcher(\".*\"));\n                }\n            };\n            /**\n             * Retrieve the recorded requests that match the parameter, as follows:\n             * - use a string value to match on path,\n             * - use a request matcher object to match on a full request,\n             * - or use null to retrieve all requests\n             *\n             * @param pathOrRequestMatcher  if a string is passed in the value will be treated as the path, however\n             *                              if an object is passed in the value will be treated as a full request\n             *                              matcher object, if null is passed in it will be treated as match all\n             */\n            var retrieveRequests = function (pathOrRequestMatcher) {\n                var resolveCallback = function(responseText) {\n                    if (responseText) {\n                        return JSON.parse(responseText);\n                    } else {\n                        return undefined;\n                    }\n                };\n                if (typeof pathOrRequestMatcher === \"string\") {\n                    return sendRequest(host, port, \"/retrieve\", createResponseMatcher(pathOrRequestMatcher), resolveCallback);\n                } else if (pathOrRequestMatcher) {\n                    return sendRequest(host, port, \"/retrieve\", pathOrRequestMatcher, resolveCallback);\n                } else {\n                    return sendRequest(host, port, \"/retrieve\", createResponseMatcher(\".*\"), resolveCallback);\n                }\n            };\n            /**\n             * Retrieve the setup expectations that match the parameter,\n             * the expectation is retrieved by matching the parameter\n             * on the expectations own request matcher, as follows:\n             * - use a string value to match on path,\n             * - use a request matcher object to match on a full request,\n             * - or use null to retrieve all requests\n             *\n             * @param pathOrRequestMatcher  if a string is passed in the value will be treated as the path, however\n             *                              if an object is passed in the value will be treated as a full request\n             *                              matcher object, if null is passed in it will be treated as match all\n             */\n            var retrieveExpectations = function (pathOrRequestMatcher) {\n                var resolveCallback = function(responseText) {\n                    if (responseText) {\n                        return JSON.parse(responseText);\n                    } else {\n                        return undefined;\n                    }\n                };\n                if (typeof pathOrRequestMatcher === \"string\") {\n                    return sendRequest(host, port, \"/retrieve?type=expectation\", createResponseMatcher(pathOrRequestMatcher), resolveCallback);\n                } else if (pathOrRequestMatcher) {\n                    return sendRequest(host, port, \"/retrieve?type=expectation\", pathOrRequestMatcher, resolveCallback);\n                } else {\n                    return sendRequest(host, port, \"/retrieve?type=expectation\", createResponseMatcher(\".*\"), resolveCallback);\n                }\n            };\n\n            var _this = {\n                mockAnyResponse: mockAnyResponse,\n                mockSimpleResponse: mockSimpleResponse,\n                setDefaultHeaders: setDefaultHeaders,\n                verify: verify,\n                verifySequence: verifySequence,\n                reset: reset,\n                clear: clear,\n                retrieveRequests: retrieveRequests,\n                retrieveExpectations: retrieveExpectations\n            };\n            return  _this;\n        },\n        /**\n         * Start the client communicating to a MockServer proxy at the specified host and port\n         * for example:\n         *\n         *   var client = proxyClient(\"localhost\", 1080);\n         *\n         * @param host the host for the proxy to communicate with\n         * @param port the port for the proxy to communicate with\n         */\n        proxyClient = function (host, port) {\n\n            var createResponseMatcher = function (path) {\n                return {\n                    method: \"\",\n                    path: path,\n                    body: \"\",\n                    headers: [],\n                    cookies: [],\n                    queryStringParameters: []\n                };\n            };\n            /**\n             * Verify a request has been sent for example:\n             *\n             *   expect(client.verify({\n             *       'httpRequest': {\n             *           'method': 'POST',\n             *           'path': '/somePath'\n             *       }\n             *   })).toBeTruthy();\n             *\n             * @param request the http request that must be matched for this verification to pass\n             * @param count   the number of times this request must be matched\n             * @param exact   true if the count is matched as \"equal to\" or false if the count is matched as \"greater than or equal to\"\n             */\n            var verify = function (request, count, exact) {\n                if (count === undefined) {\n                    count = 1;\n                }\n                return sendRequest(host, port, \"/verify\", JSON.stringify({\n                    \"httpRequest\": request,\n                    \"times\": {\n                        \"count\": count,\n                        \"exact\": exact\n                    }\n                })).then(function (result) {\n                    if (result.statusCode !== 202) {\n                        console && console.error && console.error(result.body);\n                        throw result.body;\n                    }\n                    return _this;\n                });\n            };\n            /**\n             * Verify a sequence of requests has been sent for example:\n             *\n             *   client.verifySequence(\n             *       {\n             *          'method': 'POST',\n             *          'path': '/first_request'\n             *       },\n             *       {\n             *          'method': 'POST',\n             *          'path': '/second_request'\n             *       },\n             *       {\n             *          'method': 'POST',\n             *          'path': '/third_request'\n             *       }\n             *   );\n             *\n             * @param arguments the list of http requests that must be matched for this verification to pass\n             */\n            var verifySequence = function () {\n                var requestSequence = [];\n                for (var i = 0; i < arguments.length; i++) {\n                    requestSequence.push(arguments[i]);\n                }\n                return sendRequest(host, port, \"/verifySequence\", JSON.stringify({\n                    \"httpRequests\": requestSequence\n                })).then(function (result) {\n                    if (result.statusCode !== 202) {\n                        console && console.error && console.error(result.body);\n                        throw result.body;\n                    }\n                    return _this;\n                });\n            };\n            /**\n             * Reset the proxy by clearing all recorded requests\n             */\n            var reset = function () {\n                return sendRequest(host, port, \"/reset\");\n            };\n            /**\n             * Clear all recorded requests that match the specified path\n             *\n             * @param pathOrRequestMatcher  if a string is passed in the value will be treated as the path to\n             *                              decide which recorded requests to cleared, however if an object is\n             *                              passed in the value will be treated as a full request matcher object\n             */\n            var clear = function (pathOrRequestMatcher) {\n                if (typeof pathOrRequestMatcher === \"string\") {\n                    return sendRequest(host, port, \"/clear\", createResponseMatcher(pathOrRequestMatcher));\n                } else if (pathOrRequestMatcher) {\n                    return sendRequest(host, port, \"/clear\", pathOrRequestMatcher);\n                } else {\n                    return sendRequest(host, port, \"/clear\", createResponseMatcher(\".*\"));\n                }\n            };\n            /**\n             * Pretty-print the json for all requests / responses that match the specified path\n             * as Expectations to the log. They are printed into a dedicated log called mockserver_request.log\n             *\n             * @param pathOrRequestMatcher  if a string is passed in the value will be treated as the path to\n             *                              decide which recorded requests to cleared, however if an object is\n             *                              passed in the value will be treated as a full request matcher object\n             */\n            var dumpToLogs = function (pathOrRequestMatcher) {\n                if (typeof pathOrRequestMatcher === \"string\") {\n                    return sendRequest(host, port, \"/dumpToLog\", createResponseMatcher(pathOrRequestMatcher));\n                } else if (pathOrRequestMatcher) {\n                    return sendRequest(host, port, \"/dumpToLog\", pathOrRequestMatcher);\n                } else {\n                    return sendRequest(host, port, \"/dumpToLog\", createResponseMatcher(\".*\"));\n                }\n            };\n\n            var _this = {\n                verify: verify,\n                verifySequence: verifySequence,\n                reset: reset,\n                clear: clear,\n                dumpToLogs: dumpToLogs\n            };\n            return  _this;\n        };\n\n    module.exports = {\n        mockServerClient: mockServerClient,\n        proxyClient: proxyClient\n    };\n})();","/home/travis/build/npmtest/node-npmtest-mockserver-client/node_modules/mockserver-client/Gruntfile.js":"/*\n * mockserver\n * http://mock-server.com\n *\n * Copyright (c) 2014 James Bloom\n * Licensed under the Apache License, Version 2.0\n */\n\n'use strict';\n\nmodule.exports = function (grunt) {\n\n    grunt.initConfig({\n        exec: {\n            stop_existing_mockservers: './stop_MockServer.sh'\n        },\n        jshint: {\n            options: {\n                jshintrc: '.jshintrc'\n            },\n            user_defaults: [\n                'Gruntfile.js',\n                'js/**/*.js',\n                '!js/lib/**/*.js',\n                '<%= nodeunit.no_proxy %>',\n                '<%= nodeunit.with_proxy %>'\n            ]\n        },\n        start_mockserver: {\n            options: {\n                serverPort: 1080,\n                serverSecurePort: 1082,\n                proxyPort: 1090,\n                proxySecurePort: 1092\n            }\n        },\n        stop_mockserver: {\n            options: {\n                serverPort: 1080,\n                proxyPort: 1090\n            }\n        },\n        nodeunit: {\n            no_proxy: [\n                'test/no_proxy/*_test.js'\n            ],\n            with_proxy: [\n                'test/with_proxy/*_test.js'\n            ],\n            options: {\n                reporter: 'nested'\n            }\n        }\n    });\n\n    grunt.loadNpmTasks('grunt-exec');\n    grunt.loadNpmTasks('mockserver-grunt');\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-contrib-clean');\n    grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n    grunt.registerTask('test', ['start_mockserver', 'nodeunit', 'stop_mockserver']);\n\n    grunt.registerTask('wrecker', ['jshint', 'test']);\n    grunt.registerTask('default', ['exec', 'wrecker']);\n};\n"}